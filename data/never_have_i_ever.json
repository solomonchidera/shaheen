{
    "questions" : [
        "Never have I ever broken production.",
        "Never have I ever merged without waiting for tests to pass.",
        "Never have I ever rewritten my code so they circumvent the tests.",
        "Never have I ever questioned if the test is actually useful.",
        "Never have I ever commited without testing hoping it will just work fine.",
        "Never have I ever closed a ticket without completely finishing everything because the last requirement was unlikely to see the light of day.",
        "Never have I ever left an unfinished project on my GitHub with a mental “promise” to finish it some other day.",
        "Never have I ever used a Jetbrains product for more than a week.",
        "Never have I ever committed a private key by accident.",
        "Never have I ever wrote a SQL query.",
        "Never have I ever learned different technologies at the same time.",
        "Never have I ever wrote a tutorial post.",
        "Never have I ever used AWS.",
        "Never Have I ever used curse words on my Team Lead without him Knowing or hear",
        "Never have I ever copied code from Stack Overflow without fully understanding it.",
        "Never have I ever pushed directly to the main branch.",
        "Never have I ever written code comments that only I can understand.",
        "Never have I ever left a TODO in production code.",
        "Never have I ever forgotten to remove debugging code before a commit.",
        "Never have I ever written code that only works on my machine.",
        "Never have I ever ignored a failing build to 'fix it later'.",
        "Never have I ever spent more time on coffee breaks than coding.",
        "Never have I ever pretended to understand something in a meeting.",
        "Never have I ever used a framework just because it was trending.",
        "Never have I ever left a pull request unreviewed for days.",
        "Never have I ever misnamed a variable but left it because it 'just works'.",
        "Never have I ever deployed code on a Friday afternoon.",
        "Never have I ever introduced a bug while trying to fix another bug.",
        "Never have I ever written a commit message as 'fix stuff'.",
        "Never have I ever ignored a code review comment because I didn't agree with it.",
        "Never have I ever refactored code just because I was bored.",
        "Never have I ever committed 'temporary' logging that stayed forever.",
        "Never have I ever googled how to undo a Git commit.",
        "Never have I ever spent an entire day debugging only to find a missing semicolon.",
        "Never have I ever written a function that does too many things.",
        "Never have I ever chosen the wrong branch and committed to it.",
        "Never have I ever procrastinated on writing unit tests.",
        "Never have I ever added a feature without telling anyone.",
        "Never have I ever ignored a security vulnerability because it seemed insignificant.",
        "Never have I ever pushed code with console.log statements still in place.",
        "Never have I ever used `!important` in CSS out of laziness.",
        "Never have I ever built something that was already a feature in the framework.",
        "Never have I ever lied about the time it took to complete a task.",
        "Never have I ever accidentally deleted a database.",
        "Never have I ever hardcoded a value instead of fixing the underlying issue.",
        "Never have I ever written code without thinking about performance.",
        "Never have I ever forgotten to update the documentation after changing code.",
        "Never have I ever used code from a previous project without checking if it still works.",
        "Never have I ever pushed code with the intention of fixing it later.",
        "Never have I ever skipped a meeting because I was too deep into coding.",
        "Never have I ever written code without thinking about how to test it.",
        "Never have I ever copied and pasted code instead of making it reusable.",
        "Never have I ever left a cryptic comment in code.",
        "Never have I ever accidentally pushed sensitive data to a public repo.",
        "Never have I ever avoided a task because it required working on legacy code.",
        "Never have I ever committed code with 'WIP' in the message.",
        "Never have I ever hardcoded credentials in code.",
        "Never have I ever pushed a broken feature just to meet a deadline.",
        "Never have I ever spent hours debugging only to realize it was a typo.",
        "Never have I ever forgotten to check for edge cases.",
        "Never have I ever chosen a library just because it had more stars on GitHub.",
        "Never have I ever misunderstood a requirement and built the wrong feature.",
        "Never have I ever ignored an error because 'it works anyway'.",
        "Never have I ever pushed to the wrong branch.",
        "Never have I ever delayed a project by introducing unnecessary features.",
        "Never have I ever used a global variable because it was easier.",
        "Never have I ever written code that was 'good enough for now'.",
        "Never have I ever written a function over 100 lines long.",
        "Never have I ever forgotten to pull before pushing.",
        "Never have I ever used a regex without testing it thoroughly.",
        "Never have I ever ignored warnings from the linter.",
        "Never have I ever chosen the wrong algorithm because it was easier to implement.",
        "Never have I ever released code with a 'quick fix'.",
        "Never have I ever written code just to make a test pass.",
        "Never have I ever committed with the message 'final commit'.",
        "Never have I ever underestimated how long a task would take.",
        "Never have I ever written code that I didn't document.",
        "Never have I ever forgotten to update the version number before release.",
        "Never have I ever added unnecessary dependencies to a project.",
        "Never have I ever ignored the DRY principle.",
        "Never have I ever used `sudo` just to get something to work.",
        "Never have I ever written code without thinking about scalability.",
        "Never have I ever pushed code without running tests.",
        "Never have I ever left old code commented out in a commit.",
        "Never have I ever reused a piece of code that I didn't fully understand.",
        "Never have I ever ignored a code smell.",
        "Never have I ever used a feature flag to deploy unfinished code.",
        "Never have I ever relied on the auto-generated commit message.",
        "Never have I ever committed directly to the main branch by mistake.",
        "Never have I ever overwritten someone else's work by mistake.",
        "Never have I ever ignored a memory leak because it wasn't critical.",
        "Never have I ever used `git reset --hard` to solve a problem.",
        "Never have I ever ignored a build failure because it was too late to fix it.",
        "Never have I ever written code that worked locally but broke in production.",
        "Never have I ever avoided refactoring because it was too risky.",
        "Never have I ever written a feature that wasn't requested.",
        "Never have I ever deployed without proper logging.",
        "Never have I ever forgotten to delete a feature branch after merging.",
        "Never have I ever used inline styles instead of CSS.",
        "Never have I ever used a debugger instead of understanding the problem.",
        "Never have I ever ignored a flaky test because it was 'good enough'.",
        "Never have I ever accidentally committed with `debugger` statements.",
        "Never have I ever written spaghetti code.",
        "Never have I ever ignored a bug because it wasn't reproducible.",
        "Never have I ever relied on hope as a deployment strategy.",
        "Never have I ever ignored a failing CI build.",
        "Never have I ever forgotten to set up monitoring for a new feature.",
        "Never have I ever written a commit message without describing the changes.",
        "Never have I ever pushed to production without a code review.",
        "Never have I ever ignored a code review because I was too busy.",
        "Never have I ever hardcoded an API endpoint.",
        "Never have I ever used the wrong data type for a variable.",
        "Never have I ever written code that only worked in one environment.",
        "Never have I ever written code without considering security.",
        "Never have I ever ignored a deprecation warning.",
        "Never have I ever added technical debt to meet a deadline.",
        "Never have I ever committed an `env` file by accident.",
        "Never have I ever built something without reading the documentation first.",
        "Never have I ever ignored a code convention because I didn't like it.",
        "Never have I ever avoided writing tests for legacy code.",
        "Never have I ever forgotten to update the README after making changes.",
        "Never have I ever used a tool or library without knowing how it works.",
        "Never have I ever pushed code with 'console.log' statements left in.",
        "Never have I ever ignored a bug because it was too hard to fix.",
        "Never have I ever committed code with a warning in the compiler.",
        "Never have I ever written a script that only works on my machine.",
        "Never have I ever built something only to realize it's already a library.",
        "Never have I ever ignored accessibility concerns in my code.",
        "Never have I ever relied on global state for convenience.",
        "Never have I ever written code without considering edge cases.",
        "Never have I ever released code without proper error handling.",
        "Never have I ever ignored a failing test because I was too busy.",
        "Never have I ever refactored code just because I didn't like the way it looked.",
        "Never have I ever deployed a hotfix that caused more issues.",
        "Never have I ever used a CSS framework because I didn't want to write custom styles.",
        "Never have I ever written a hack instead of a proper fix.",
        "Never have I ever ignored a bug because it didn't affect me.",
        "Never have I ever used a pattern or practice without understanding it fully.",
        "Never have I ever pushed code with a hardcoded secret.",
        "Never have I ever written code without considering future maintenance.",
        "Never have I ever used an outdated library because upgrading was too much work.",
        "Never have I ever ignored a code smell because 'it's always been that way'.",
        "Never have I ever written a feature without considering user experience.",
        "Never have I ever left a bug unfixed because it was 'too minor'.",
        "Never have I ever forgotten to review someone else's code.",
        "Never have I ever ignored a performance issue because it was too hard to optimize.",
        "Never have I ever used an API without reading the documentation.",
        "Never have I ever ignored a warning because 'it was just a warning'."
    ]

}